@page "/studentslist/{ClassroomId:int}"
@inject NavigationManager NavigationManager;
@inject HttpClient HttpClient
@using ULMS.Shared.Models

<div class="marks-container">
    <h4 class="marks-title">Students List</h4>
    <button @onclick="NavigateBack" class="btn-secondary">Back to Courses</button>

    <!-- Table to display user ids, names, and edit button -->
    <table class="submission-table">
        <thead>
            <tr>
                <th>User ID</th>
                <th>User Name</th>
                <th>Edit</th>
            </tr>
        </thead>
        <tbody>
            @if (userDetails != null && userDetails.Any())
            {
                @foreach (var user in userDetails)
                {
                    @if (user.Role == "Student")
                    {
                        <tr>
                            <td>@user.Id</td>
                            <td>@user.Name</td>
                            <td><button @onclick="@(() => EditUser(user))" class="btn btn-primary">Edit</button></td>
                        </tr>
                    }
                }
            }
            else
            {
                <tr>
                    <td colspan="3">No user details available</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter] public int ClassroomId { get; set; }
    private List<Account> userDetails;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch user IDs and names for the given classroom ID
            var userIds = await HttpClient.GetFromJsonAsync<List<long>>($"api/Classroom/Users/{ClassroomId}");
            if (userIds != null && userIds.Any())
            {
                userDetails = new List<Account>();
                foreach (var userId in userIds)
                {
                    var user = await HttpClient.GetFromJsonAsync<Account>($"/account/{userId}");
                    if (user.Role == "Student")
                    {
                        userDetails.Add(user);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/marks");
    }

    private void EditUser(Account user)
    {
        // Implement logic to navigate to the edit page for the selected user
        // For example:
        NavigationManager.NavigateTo($"/editmarks/{ClassroomId}/{user.Id}");
    }
}
