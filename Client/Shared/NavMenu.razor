@using ULMS.Shared.Models
@inject UserService UserService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">EduSync</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        @* <div class="nav-item px-3"> *@
        @*     <NavLink class="nav-link" href="counter"> *@
        @*         <span class="oi oi-plus" aria-hidden="true"></span> Counter *@
        @*     </NavLink> *@
        @* </div> *@
        @* <div class="nav-item px-3"> *@
        @*     <NavLink class="nav-link" href="fetchdata"> *@
        @*         <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data *@
        @*     </NavLink> *@
        @* </div> *@
        
        @if (UserService.GetLoggedInUser() != null && UserService.GetLoggedInUser().Role == "Admin")
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/admindashboard">
                    <span class="oi oi-dashboard" aria-hidden="true"></span> Admin Dashboard
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/classroom">
                    <span class="oi oi-dashboard" aria-hidden="true"></span> Classroom
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/department">
                    <span class="oi oi-dashboard" aria-hidden="true"></span> Departments
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/instructors">
                    <span class="oi oi-dashboard" aria-hidden="true"></span> Instructors
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/students">
                    <span class="oi oi-dashboard" aria-hidden="true"></span> Students
                </NavLink>
            </div>
            <!-- More Admin-specific links here -->
        }
        else if (UserService.GetLoggedInUser().Role == "Student")
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/classroom">
                    <span class="oi oi-book" aria-hidden="true"></span> Classroom
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/studentmarks">
                    <span class="oi oi-bar-chart" aria-hidden="true"></span> Marks
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/library">
                    <span class="oi oi-globe" aria-hidden="true"></span> Library
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/pastpaper">
                    <span class="oi oi-folder" aria-hidden="true"></span> Past Papers
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/studentcalendar">
                    <span class="oi oi-calendar" aria-hidden="true"></span> Calendar
                </NavLink>
            </div>

            <!-- More Student-specific links here -->
        }
            else if (UserService.GetLoggedInUser().Role == "Instructor")
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/instructordashboard">
                        <span class="oi oi-book" aria-hidden="true"></span> Instructor Dashboard
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/classroom">
                        <span class="oi oi-book" aria-hidden="true"></span> Courses
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/instructormarks">
                        <span class="oi oi-bar-chart" aria-hidden="true"></span> Marks
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/library">
                        <span class="oi oi-globe" aria-hidden="true"></span> Library
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/pastpaper">
                        <span class="oi oi-folder" aria-hidden="true"></span> Past Papers
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/instructorcalendar">
                        <span class="oi oi-calendar" aria-hidden="true"></span> Calendar
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/attendance">
                        <span class="oi oi-check" aria-hidden="true"></span> Attendance
                    </NavLink>
                </div>
                <!-- More Student-specific links here -->
            }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        UserService.UserChanged += HandleUserChanged;
    }

    private void HandleUserChanged(object sender, UserChangedEventArgs e)
    {
        StateHasChanged(); // Force component refresh
    }
}
