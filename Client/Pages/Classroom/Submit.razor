@page "/submit/{ClassroomId:int}/{PostId:int}"
@using ULMS.Shared.Models
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject UserService UserService
@inject IJSRuntime JSRuntime

<div class="post-card">

    @if (submissionPost != null)
    {
        <div class="post-info">
            <h4>Post Description:</h4>
            <p style="text-align: left;">@submissionPost.PostDescription</p>
            <button @onclick="NavigateBack" class="back-button">Back</button>
        </div>

        @if (UserService.GetLoggedInUser().Role == "Instructor")
        {
            <div class="post-info">
                <h4>Submissions:</h4>
                <div class="table-container">
                    <table class="submission-table">
                        <thead>
                        <tr>
                            <th>Student ID</th>
                            <th>Student Name</th>
                            <th>Submission Marks</th>
                            <th>Edit Marks</th>
                            <th>View Submission</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var submission in submissions)
                        {
                            <tr>
                                <td>@submission.StudentId</td>
                                <td>@submission.StudentName</td>
                                <td>@submission.SubmissionMarks</td>
                                <td><button @onclick="() => EditMarks(submission)" class="edit-button">Edit</button></td>
                                <td><a href="@submission.SubmissionUrl" target="_blank" class="view-button">View</a></td>
                                
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        }

        @if (UserService.GetLoggedInUser().Role == "Student")
        {
            <h3>Submission</h3>

            @if (userHasSubmittedWork)
            {
                <div class="alert alert-success" role="alert">
                    You have submitted your work for this post.
                </div>
                <button @onclick="UnsubmitWork" class="btn-unsubmit">Unsubmit</button>
            }
            else
            {
                <div class="submission-form">
                    <h4>Submit Your Work</h4>
                    <div>
                        <label for="submissionUrl">Submission URL:</label>
                        <input type="text" @bind="submissionUrl" id="submissionUrl" />
                    </div>
                    <button @onclick="SubmitWork" class="btn-submit">Submit</button>
                </div>
            }
        }
    }
</div>

@code {
    [Parameter]
    public int PostId { get; set; }

    [Parameter]
    public int ClassroomId { get; set; }

    private string submissionUrl;
    private Post submissionPost;
    private bool userHasSubmittedWork = false;
    private List<Submission> submissions = new List<Submission>();

    protected override async Task OnInitializedAsync()
    {
        await LoadSubmissionPost();
        await LoadSubmissions();
        await CheckUserSubmission();
    }

    private void NavigateBack()
    {
        // Navigate back to the classroom page using NavigationManager
        NavigationManager.NavigateTo($"/classroom/{ClassroomId}");
    }
    
    async Task LoadSubmissionPost()
    {
        try
        {
            // Make HTTP GET request to retrieve the post by classroom ID and post ID
            var response = await Http.GetAsync($"api/Post/Classroom/{ClassroomId}/{PostId}");

            if (response.IsSuccessStatusCode)
            {
                // Deserialize the response content to get the post data
                submissionPost = await response.Content.ReadFromJsonAsync<Post>();
            }
            else
            {
                // Handle the case where the request fails (e.g., post not found)
                // For now, set default values or display an error message
                submissionPost = new Post
                {
                    PostId = PostId,
                    PostDescription = "Unable to load post data",
                    PostAttachment = ""
                };
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions (e.g., network error, deserialization error)
            // For now, set default values or display an error message
            submissionPost = new Post
            {
                PostId = PostId,
                PostDescription = "An error occurred while loading post data",
                PostAttachment = ""
            };
        }
    }

    async Task LoadSubmissions()
    {
        try
        {
            // Fetch submissions from the server based on ClassroomId and PostId
            // Replace this with actual API call to retrieve submissions
            // For demonstration purposes, let's assume submissions are loaded from a fake API
            submissions = await Http.GetFromJsonAsync<List<Submission>>($"api/submission/{ClassroomId}/{PostId}");
        }
        catch (HttpRequestException ex)
        {
            // Handle the exception gracefully, such as displaying an error message
            Console.WriteLine($"An error occurred while loading submissions: {ex.Message}");
            // You can also set a default value for submissions or perform other error handling tasks
            submissions = new List<Submission>();
        }
    }

    private async Task CheckUserSubmission()
    {
        try
        {
            // Check if the logged-in user has already submitted work for this post
            var loggedInUserId = UserService.GetLoggedInUser().Id;
            userHasSubmittedWork = submissions.Any(s => s.StudentId == loggedInUserId);
        }
        catch (Exception ex)
        {
            // Handle the exception (e.g., log the error, display a message to the user)
            Console.WriteLine($"Error checking user submission: {ex.Message}");
        }
    }

    private async Task SubmitWork()
    {
        // Prepare the submission data
        var newSubmission = new Submission
        {
            ClassroomId = ClassroomId,
            PostId = PostId,
            StudentId = UserService.GetLoggedInUser().Id,
            StudentName = UserService.GetLoggedInUser().Name,
            SubmissionUrl = submissionUrl,
            SubmissionType = submissionPost.SubmissionType
        };

        try
        {
            // Send the submission data to the server
            var response = await Http.PostAsJsonAsync("api/submission", newSubmission);

            if (response.IsSuccessStatusCode)
            {
                userHasSubmittedWork = true; // Set flag to true after successful submission
                submissionUrl = ""; // Clear the input field
                await LoadSubmissions(); // Reload submissions after successful submission
            }
            else
            {
                Console.WriteLine("Submission failed.");
            }
        }
        catch (Exception ex)
        {
            // Handle error scenario
            Console.WriteLine($"Error submitting work: {ex.Message}");
        }
    }

    private async Task UnsubmitWork()
    {
        try
        {
            // Find the submission to delete
            var submissionToDelete = submissions.FirstOrDefault(s => s.StudentId == UserService.GetLoggedInUser().Id);

            if (submissionToDelete != null)
            {
                // Send request to delete the submission
                var response = await Http.DeleteAsync($"api/submission/{submissionToDelete.ClassroomId}/{submissionToDelete.PostId}");

                if (response.IsSuccessStatusCode)
                {
                    // Submission successfully deleted
                    userHasSubmittedWork = false; // Hide the success message
                }
                else
                {
                    Console.WriteLine("Failed to unsubmit work.");
                }
            }
            else
            {
                Console.WriteLine("No submission found to unsubmit.");
            }
        }
        catch (Exception ex)
        {
            // Handle error scenario
            Console.WriteLine($"Error unsubmitting work: {ex.Message}");
        }
    }

    private async Task EditMarks(Submission submission)
    {
        // Retrieve the student ID of the selected submission
        var studentId = submission.StudentId;

        // Fetch the corresponding submission from the server using classroom ID, post ID, and student ID
        var selectedSubmission = submissions.FirstOrDefault(s => s.StudentId == studentId);

        if (selectedSubmission != null)
        {
            // Prompt the instructor to enter new marks
            var newMarksString = await JSRuntime.InvokeAsync<string>("prompt", "Enter new marks:");

            // Parse the entered marks string to an integer
            if (int.TryParse(newMarksString, out int newMarks))
            {
                // Update the marks of the selected submission
                selectedSubmission.SubmissionMarks = newMarks;

                try
                {
                    // Send a PUT request to update the submission marks
                    var response = await Http.PutAsJsonAsync($"api/submission/{selectedSubmission.SubmissionId}", selectedSubmission);

                    if (response.IsSuccessStatusCode)
                    {
                        // Marks updated successfully
                        // You may want to reload the submissions table to reflect the changes
                        await LoadSubmissions();
                    }
                    else
                    {
                        // Handle the case where the PUT request fails
                        Console.WriteLine("Failed to update submission marks.");
                    }
                }
                catch (Exception ex)
                {
                    // Handle error scenario
                    Console.WriteLine($"Error updating submission marks: {ex.Message}");
                }
            }
            else
            {
                // Display an error message if the entered marks are not valid
                Console.WriteLine("Invalid marks entered.");
            }
        }
        else
        {
            Console.WriteLine("Selected submission not found.");
        }
    }
    
    
}
