@page "/marks/{ClassroomID:int}"
@inject NavigationManager NavigationManager;
@inject UserService UserService;
@inject HttpClient HttpClient
@using ULMS.Shared.Models

<div class="marks-container">
    <h3 class="marks-title">Marks</h3>
    <button @onclick="NavigateBack" class="btn btn-secondary">Back to Courses</button>


    <div class="submission-section">
        @if (quizSubmissions != null && quizSubmissions.Count > 0)
        {
            <h4>Quiz</h4>
            <table class="submission-table">
                <thead>
                    <tr>
                        <th>Submission #</th>
                        <th>Marks</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (index, quizSubmission) in quizSubmissions.Select((submission, index) => (index, submission)))
                    {
                        <tr>
                            <td>@(index + 1)</td>
                            <td>@(quizSubmission.SubmissionMarks.HasValue ? quizSubmission.SubmissionMarks.ToString() : "NA")</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="submission-section">
                <h4>Quiz</h4>
                <table class="submission-table">
                    <thead>
                    <tr>
                        <th>Submission #</th>
                        <th>Marks</th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                        <td colspan="2">Submission is Not Available</td>
                    </tr>
                    </tbody>
                </table>
            </div>
        }
    </div>

    <div class="submission-section">
        @if (assignmentSubmissions != null && assignmentSubmissions.Count > 0)
        {
            <h4>Assignment</h4>
            <table class="submission-table">
                <thead>
                    <tr>
                        <th>Submission #</th>
                        <th>Marks</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (index, assignmentSubmission) in assignmentSubmissions.Select((submission, index) => (index, submission)))
                    {
                        <tr>
                            <td>@(index + 1)</td>
                            <td>@(assignmentSubmission.SubmissionMarks.HasValue ? assignmentSubmission.SubmissionMarks.ToString() : "NA")</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="submission-section">
                <h4>Assignment</h4>
                <table class="submission-table">
                    <thead>
                    <tr>
                        <th>Submission #</th>
                        <th>Marks</th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                        <td colspan="2">Submission is Not Available</td>
                    </tr>
                    </tbody>
                </table>
            </div>
        }
    </div>

    <div class="submission-section">
        @if (projectSubmissions != null && projectSubmissions.Count > 0)
        {
            <h4>Project</h4>
            <table class="submission-table">
                <thead>
                    <tr>
                        <th>Submission #</th>
                        <th>Marks</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (index, projectSubmission) in projectSubmissions.Select((submission, index) => (index, submission)))
                    {
                        <tr>
                            <td>@(index + 1)</td>
                            <td>@(projectSubmission.SubmissionMarks.HasValue ? projectSubmission.SubmissionMarks.ToString() : "NA")</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="submission-section">
                <h4>Project</h4>
                <table class="submission-table">
                    <thead>
                    <tr>
                        <th>Submission #</th>
                        <th>Marks</th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                        <td colspan="2">Submission is Not Available</td>
                    </tr>
                    </tbody>
                </table>
            </div>
        }
    </div>


</div>

@code {
    [Parameter] public int ClassroomID { get; set; }
    private List<Submission> submissions;
    private List<Submission> quizSubmissions;
    private List<Submission> assignmentSubmissions;
    private List<Submission> projectSubmissions;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var loggedInUserId = UserService.GetLoggedInUser().Id;
            submissions = await HttpClient.GetFromJsonAsync<List<Submission>>($"api/Submission/Classroom/{ClassroomID}/{loggedInUserId}");

            if (submissions != null)
            {
                quizSubmissions = submissions.Where(s => s.SubmissionType == "Quiz").ToList();
                assignmentSubmissions = submissions.Where(s => s.SubmissionType == "Assignment").ToList();
                projectSubmissions = submissions.Where(s => s.SubmissionType == "Project").ToList();
            }
        }
        catch (Exception ex)
        {
            // Handle the exception here, such as logging or displaying an error message.
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }
    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/marks");
    }
}
