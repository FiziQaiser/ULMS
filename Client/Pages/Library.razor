@page "/library"
@using ULMS.Shared.Models
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject UserService UserService

<PageTitle>Library</PageTitle>

<h3>Library</h3>
@if (UserService.GetLoggedInUser().Role != "Student")
{
    <button @onclick="ToggleSlider" class="insert-button">Insert New Book</button>
}

<div class="@($"slider {(isSliderVisible ? "open" : "")}")">
    <div class="slider-header">
        <h4>Add New Book</h4>
        <button @onclick="ToggleSlider" class="close-button">X</button>
    </div>
    <div class="slider-content">
        <div class="form-group">
            <label for="title">Title:</label>
            <input type="text" id="title" @bind="newBook.Title">
        </div>
        <div class="form-group">
            <label for="author">Author:</label>
            <input type="text" id="author" @bind="newBook.Author">
        </div>
        <div class="form-group">
            <label for="url">URL:</label>
            <input type="text" id="url" @bind="newBook.Url">
        </div>
        <div class="form-group">
            <label for="id">ID:</label>
            <input type="text" id="id" @bind="newBook.Id">
        </div>
        <button @onclick="AddBook" class="add-button">Add Book</button>
    </div>
</div>

<table>
    <thead>
        <tr>
            <th>Title</th>
            <th>Author</th>
            <th>Uploaded By</th>
            <th>URL</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var book in Books)
        {
            <tr>
                <td>@book.Title</td>
                <td>@book.Author</td>
                <td>@book.Uploadedby</td>
                <td>
                    @if (!string.IsNullOrEmpty(book.Url))
                    {
                        <a href="@book.Url" target="_blank"><button class="download-button">Download</button></a>
                    }
                    else
                    {
                        <span>No URL</span>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>


<style>
    .insert-button, .add-button, .download-button {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px 15px;
        cursor: pointer;
        border-radius: 5px;
        font-size: 16px;
        margin-bottom: 10px;
    }

    .insert-button:hover, .add-button:hover, download-button:hover {
        background-color: #0056b3;
    }

    .slider {
        position: fixed;
        right: 0;
        top: 0;
        width: 350px;
        height: 100%;
        background-color: #f9f9f9;
        box-shadow: -5px 0 15px rgba(0,0,0,0.2);
        padding: 20px;
        transform: translateX(100%);
        transition: transform 0.3s ease-in-out;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
    }

    .slider.open {
        transform: translateX(0);
    }

    .slider-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .close-button {
        cursor: pointer;
        border: none;
        background-color: transparent;
        font-size: 20px;
        color: #333;
    }

    .slider-content {
        flex-grow: 1;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        color: #333;
    }

    .form-group input {
        width: 100%;
        padding: 8px;
        border-radius: 4px;
        border: 1px solid #ddd;
        box-sizing: border-box;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }
    
    th, td {
        padding: 8px;
        border-bottom: 1px solid #ddd;
        text-align: left;
    }
    
    th {
        background-color: #f2f2f2;
    }
</style>

@code {
    List<Book> Books { get; set; } = new List<Book>();
    Book newBook = new Book();
    bool isSliderVisible = false;

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetFromJsonAsync<List<Book>>("book"); // Adjust the endpoint as necessary
        
        if (response != null)
        {
            Books = response;
        }
    }

    void ToggleSlider()
    {
        isSliderVisible = !isSliderVisible;
    }

    async Task AddBook()
    {
        newBook.Uploadedby = UserService.GetLoggedInUser().Name;
        var result = await Http.PostAsJsonAsync("book", newBook); // Use the correct endpoint URL

        Books.Add(newBook);
        newBook = new Book(); // Reset the form
        isSliderVisible = false; // Close the slider
    }
}
