@page "/classroom/{ClassroomID:int}"
@inject NavigationManager NavigationManager;
@using ULMS.Shared.Models
@inject HttpClient Http
@inject UserService UserService


<!-- New Post Form -->
<div class="new-post-form">
    <!-- Back Button -->
    <button @onclick="NavigateBack" class="back-button1">Back</button>
    <!-- New Post Form Title -->
    <h4>Add a New Post</h4>
    <div>
        <label for="postDescription">Post Description:</label>
        <input type="text" @bind="newPostDescription" id="postDescription"/>
    </div>
    <div>
        <label for="postAttachment">Post Attachment URL:</label>
        <input type="text" @bind="newPostAttachment" id="postAttachment" />
    </div>
    @if (UserService.GetLoggedInUser().Role != "Student")
    {
        <!-- Toggle and submission type dropdown menu -->
        <div class="toggle-container">
            <label class="toggle-label">Submission Post:</label>
            <label class="toggle-switch">
                <input type="checkbox" @bind="isSubmissionPost" />
                <span class="toggle-slider"></span>
            </label>
        </div>
        @if (isSubmissionPost)
        {
            <div class="submission-options">
                <label for="submissionType">Submission Type:</label>
                <select id="submissionType" @bind="selectedSubmissionType">
                    <option value="Assignment">Assignment</option>
                    <option value="Quiz">Quiz</option>
                    <option value="Project">Project</option>
                </select>
            </div>
        }
    }
    <!-- Add Post Button -->
    <button @onclick="AddPostAsync">Add Post</button>
</div>



@if (filteredPosts != null && filteredPosts.Any())
{
    <div class="post-container">
        @foreach (var post in filteredPosts.Reverse())
        {
            <!-- Post card remains unchanged -->
            <div class="post-card">
                <div class="post-card-header">
                    <div class="sender-initial">@post.SenderName.Substring(0, 1)</div> <!-- Add sender's initial -->
                    <h5>@post.SenderName</h5>
                </div>
                <div class="post-card-body">
                    <p><strong>@post.PostDescription</strong></p>
                    <div class="button-container">
                        @if (!string.IsNullOrEmpty(post.PostAttachment))
                        {
                            <div class="post-card-attachment">
                                <a href="@post.PostAttachment" target="_blank" class="attachment-button">Attachment</a>
                               @if (post.IsSubmissionPost)
                                {
                                    <button @onclick="() => ViewSubmission(post)" class="submission-button">View Submission</button>
                                }
                            </div>
                        }
 
                    </div>
                </div>

                <!-- Render comments here -->
                <div class="comment-container">
                    @if (comments.ContainsKey(post.PostId) && comments[post.PostId].Any())
                    {
                        @foreach (var comment in comments[post.PostId])
                        {
                            <div class="comment-card comment-left-align">
                                <p><strong>@comment.SenderName:</strong> @comment.SenderComment</p>
                            </div>
                        }
                    }
                    else
                    {
                        @* <p>No comments yet.</p> *@
                    }
                </div>

                <!-- Add new comment box remains unchanged -->
                <div class="new-comment-box">
                    <input type="text" @bind="newCommentInputs[post.PostId]" placeholder="Add a comment..." />
                    <button class="add-comment-button" @onclick="() => AddCommentAsync(post.PostId, newCommentInputs[post.PostId])">Add Comment</button>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No posts available for this classroom.</p>
}




@code {
    [Parameter]
    public int ClassroomID { get; set; }

    private string newPostDescription;
    private string newPostAttachment;
    private bool isSubmissionPost;
    private string selectedSubmissionType = "Assignment";

    private IEnumerable<Post> filteredPosts;
    private Dictionary<int, List<Comment>> comments = new Dictionary<int, List<Comment>>();
    private Dictionary<int, string> newCommentInputs = new Dictionary<int, string>(); // Dictionary to hold new comment inputs

    // Inside your Blazor component code
    protected override async Task OnParametersSetAsync()
    {
        
        // Retrieve posts from the server based on the course ID
        filteredPosts = await Http.GetFromJsonAsync<IEnumerable<Post>>($"api/Post/Classroom/{ClassroomID}");

        if (filteredPosts != null)
        {
            // Initialize comments dictionary with empty lists for each post
            foreach (var post in filteredPosts)
            {
                comments[post.PostId] = new List<Comment>();
                newCommentInputs[post.PostId] = ""; // Initialize new comment input for each post

                try
                {
                    // Retrieve comments for each post from the server
                    var fetchedComments = await Http.GetFromJsonAsync<IEnumerable<Comment>>($"api/Comment/Classroom/{ClassroomID}/{post.PostId}");

                    if (fetchedComments != null)
                    {
                        // Add fetched comments to the comments dictionary
                        foreach (var comment in fetchedComments)
                        {
                            comments[post.PostId].Add(comment);
                        }
                    }
                }
                catch (HttpRequestException ex)
                {
                    // Handle the case where comments are not found for a post
                    // For example, you can log the error or handle it gracefully
                    Console.WriteLine($"Error fetching comments for post {post.PostId}: {ex.Message}");
                }

            }
        }
    }

    // Navigate back to the classroom page
    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/classroom");
    }
    async Task AddPostAsync()
    {
        if (!string.IsNullOrWhiteSpace(newPostDescription))
        {
            var newPost = new Post
            {
                SenderName = UserService.GetLoggedInUser().Name,
                PostDescription = newPostDescription,
                PostAttachment = newPostAttachment,
                ClassroomId = ClassroomID,
                IsSubmissionPost = isSubmissionPost,
                SubmissionType = selectedSubmissionType
            };

            // Post the new post to the server
            var response = await Http.PostAsJsonAsync("api/Post", newPost);
            if (response.IsSuccessStatusCode)
            {
                // Refresh the posts after adding the new post
                await OnParametersSetAsync();
            }
            else
            {
                // Handle error if the post request fails
            }
        }
    }

    private void ViewSubmission(Post submissionPost)
    {
        // Redirect to the submission page passing the submissionPost information
        NavigationManager.NavigateTo($"/submit/{submissionPost.ClassroomId}/{submissionPost.PostId}");
    }

    private async Task AddCommentAsync(int postId, string commentContent)
    {
        try
        {
            // Create a new Comment object
            var newComment = new Comment
            {
                PostId = postId,
                ClassroomId = ClassroomID,
                SenderName = UserService.GetLoggedInUser().Name,
                SenderComment = commentContent
            };

            // Post the new comment to the server
            var response = await Http.PostAsJsonAsync("api/Comment", newComment);
        
            // Check if the request was successful
            if (response.IsSuccessStatusCode)
            {
                // Refresh the comments after adding the new comment
                await FetchCommentsForPostAsync(postId);
            }
            else
            {
                // Handle the case where the POST request fails
                // For example, you can log the error or display an error message to the user
            }
        }
        catch (Exception ex)
        {
            // Handle any other exceptions that may occur
            // For example, you can log the error or display an error message to the user
        }
    }

    private async Task FetchCommentsForPostAsync(int postId)
    {
        try
        {
            // Retrieve comments for the specified post from the server
            var fetchedComments = await Http.GetFromJsonAsync<IEnumerable<Comment>>($"api/Comment/Classroom/{ClassroomID}/{postId}");

            // Update the comments dictionary with the fetched comments
            if (fetchedComments != null)
            {
                comments[postId] = fetchedComments.ToList();
            }
            else
            {
                // Clear the comments list if no comments were fetched
                comments[postId].Clear();
            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions that may occur while fetching comments
            // For example, you can log the error or display an error message to the user
        }
    }
}
