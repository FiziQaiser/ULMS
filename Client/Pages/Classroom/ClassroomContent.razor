@page "/classroom/{CourseId:int}"
@inject NavigationManager NavigationManager;
@using ULMS.Shared.Models
@inject HttpClient Http
@inject UserService UserService

<style>
    /* Post Creation Form Styles */
    div.new-post-form {
        margin-bottom: 20px;
        padding: 15px;
        border: 1px solid #dee2e6;
        border-radius: 5px;
        background-color: #f8f9fa;
    }

    div.new-post-form h4 {
        margin-bottom: 15px;
    }

    div.new-post-form div {
        margin-bottom: 10px;
    }

    div.new-post-form label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    div.new-post-form input[type="text"] {
        width: 100%;
        padding: 8px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        box-sizing: border-box;
    }

    div.new-post-form button {
        display: inline-block;
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
    }

    div.new-post-form button:hover {
        background-color: #0056b3;
    }

    /* General post container styles */
    .post-container {
        display: flex;
        flex-direction: column;
        gap: 20px;
        margin-top: 20px;
    }

    /* Individual post card styles */
    .post-card {
        background-color: #ffffff;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }

    .post-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 15px rgba(0, 0, 0, 0.2);
    }

    /* Post card header */
    .post-card-header {
        background-color: #f8f9fa;
        padding: 12px 20px;
        border-bottom: 1px solid #e0e0e0;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .post-card-header h5 {
        margin: 0;
        font-size: 18px;
        color: #333;
    }

    /* Post card body */
    .post-card-body {
        padding: 20px;
    }

    .post-card-body p {
        text-align: left; /* Ensure text is aligned to the left */
        margin: 0;
        line-height: 1.6;
        color: #555;
    }


    /* Post card attachment link */
    .post-card-attachment {
        margin-top: 10px;
    }

    .post-card-attachment a {
        display: inline-block;
        background-color: #007bff;
        color: #ffffff;
        padding: 6px 12px;
        border-radius: 4px;
        text-decoration: none;
        font-size: 14px;
    }

    .post-card-attachment a:hover {
        background-color: #0056b3;
    }

    /* Submission button */
    .submission-button {
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 6px 12px;
        text-decoration: none;
        cursor: pointer;
        font-size: 14px;
    }

    .submission-button:hover {
        background-color: #218838;
    }

    /* Toggle switch styles */
    .toggle-container {
        display: flex;
        align-items: center;
    }

    .toggle-label {
        margin-right: 10px;
    }

    .toggle-switch {
        position: relative;
        display: inline-block;
        width: 40px;
        height: 20px;
    }

    .toggle-slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        border-radius: 20px;
        transition: .4s;
    }

    .toggle-slider:before {
        position: absolute;
        content: "";
        height: 16px;
        width: 16px;
        left: 2px;
        bottom: 2px;
        background-color: white;
        border-radius: 50%;
        transition: .4s;
    }

    input[type="checkbox"] {
        display: none;
    }

    input[type="checkbox"]:checked + .toggle-slider {
        background-color: #2196F3;
    }

    input[type="checkbox"]:checked + .toggle-slider:before {
        transform: translateX(20px);
    }
    
    /* Comment card styles */
    .comment-card {
        background-color: #f0f0f0;
        padding: 10px;
        border-radius: 4px;
        margin-bottom: 5px;
        text-align: left; /* Align text to the left */
    }

    .comment-card p {
        margin: 0;
    }

    /* New comment box styles */
    .new-comment-box {
        margin-top: 15px;
    }

    .new-comment-box input[type="text"] {
        width: calc(100% - 100px); /* Adjust width as needed */
        padding: 8px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        box-sizing: border-box;
        margin-right: 10px;
    }

    .new-comment-box button.add-comment-button {
        padding: 8px 15px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
    }

    .new-comment-box button.add-comment-button:hover {
        background-color: #0056b3;
    }
</style>

<h3>Classroom Posts for Course ID: @CourseId</h3>

<!-- New Post Form -->
<div class="new-post-form">
    <h4>Add a New Post</h4>
    <div>
        <label for="postDescription">Post Description:</label>
        <input type="text" @bind="newPostDescription" id="postDescription" />
    </div>
    <div>
        <label for="postAttachment">Post Attachment URL:</label>
        <input type="text" @bind="newPostAttachment" id="postAttachment" />
    </div>
    <div class="toggle-container">
        <label class="toggle-label">Submission Post:</label>
        <label class="toggle-switch">
            <input type="checkbox" @bind="isSubmissionPost" />
            <span class="toggle-slider"></span>
        </label>
    </div>
    <button @onclick="AddPostAsync">Add Post</button>
</div>


@if (filteredPosts != null && filteredPosts.Any())
{
    <div class="post-container">
        @foreach (var post in filteredPosts.Reverse())
        {
            <!-- Post card remains unchanged -->
            <div class="post-card">
                <div class="post-card-header">
                    <h5>@post.SenderName</h5>
                </div>
                <div class="post-card-body">
                    <p>@post.PostDescription</p>
                    @if (!string.IsNullOrEmpty(post.PostAttachment))
                    {
                        <div class="post-card-attachment">
                            <a href="@post.PostAttachment">Attachment</a>
                        </div>
                    }
                    
                    <!-- View Submission button -->
                    @if (post.IsSubmissionPost)
                    {
                        <div>
                            <button @onclick="() => ViewSubmission(post)" class="submission-button">View Submission</button>
                        </div>
                    }
                </div>

                <!-- Render comments here -->
                <div class="comment-container">
                    @if (comments.ContainsKey(post.PostId) && comments[post.PostId].Any())
                    {
                        @foreach (var comment in comments[post.PostId])
                        {
                            <div class="comment-card">
                                <p><strong>@comment.SenderName:</strong> @comment.SenderComment</p>
                            </div>
                        }
                    }
                    else
                    {
                        @* <p>No comments yet.</p> *@
                    }
                </div>

                <!-- Add new comment box remains unchanged -->
                <div class="new-comment-box">
                    <input type="text" @bind="newCommentInputs[post.PostId]" placeholder="Add a comment..." />
                    <button class="add-comment-button" @onclick="() => AddCommentAsync(post.PostId, newCommentInputs[post.PostId])">Add Comment</button>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No posts available for this classroom.</p>
}

@code {
    [Parameter]
    public int CourseId { get; set; }

    private string newPostDescription;
    private string newPostAttachment;
    private bool isSubmissionPost;

    private IEnumerable<Post> filteredPosts;
    private Dictionary<int, List<Comment>> comments = new Dictionary<int, List<Comment>>();
    private Dictionary<int, string> newCommentInputs = new Dictionary<int, string>(); // Dictionary to hold new comment inputs

// Inside your Blazor component code
    protected override async Task OnParametersSetAsync()
    {
        // Retrieve posts from the server based on the course ID
        filteredPosts = await Http.GetFromJsonAsync<IEnumerable<Post>>($"api/Post/Classroom/{CourseId}");

        if (filteredPosts != null)
        {
            // Initialize comments dictionary with empty lists for each post
            foreach (var post in filteredPosts)
            {
                comments[post.PostId] = new List<Comment>();
                newCommentInputs[post.PostId] = ""; // Initialize new comment input for each post

                try
                {
                    // Retrieve comments for each post from the server
                    var fetchedComments = await Http.GetFromJsonAsync<IEnumerable<Comment>>($"api/Comment/Classroom/{CourseId}/{post.PostId}");

                    if (fetchedComments != null)
                    {
                        // Add fetched comments to the comments dictionary
                        foreach (var comment in fetchedComments)
                        {
                            comments[post.PostId].Add(comment);
                        }
                    }
                }
                catch (HttpRequestException ex)
                {
                    // Handle the case where comments are not found for a post
                    // For example, you can log the error or handle it gracefully
                    Console.WriteLine($"Error fetching comments for post {post.PostId}: {ex.Message}");
                }

            }
        }
    }

    async Task AddPostAsync()
    {
        if (!string.IsNullOrWhiteSpace(newPostDescription))
        {
            var newPost = new Post
            {
                SenderName = UserService.GetLoggedInUser().Name,
                PostDescription = newPostDescription,
                PostAttachment = newPostAttachment,
                ClassroomId = CourseId,
                IsSubmissionPost = isSubmissionPost
            };

            // Post the new post to the server
            var response = await Http.PostAsJsonAsync("api/Post", newPost);
            if (response.IsSuccessStatusCode)
            {
                // Refresh the posts after adding the new post
                await OnParametersSetAsync();
            }
            else
            {
                // Handle error if the post request fails
            }
        }
    }

    private void ViewSubmission(Post submissionPost)
    {
        // Redirect to the submission page passing the submissionPost information
        NavigationManager.NavigateTo($"/submit/{submissionPost.PostId}");
    }

    private async Task AddCommentAsync(int postId, string commentContent)
    {
        try
        {
            // Create a new Comment object
            var newComment = new Comment
            {
                PostId = postId,
                ClassroomId = CourseId,
                SenderName = UserService.GetLoggedInUser().Name,
                SenderComment = commentContent
            };

            // Post the new comment to the server
            var response = await Http.PostAsJsonAsync("api/Comment", newComment);
        
            // Check if the request was successful
            if (response.IsSuccessStatusCode)
            {
                // Refresh the comments after adding the new comment
                await FetchCommentsForPostAsync(postId);
            }
            else
            {
                // Handle the case where the POST request fails
                // For example, you can log the error or display an error message to the user
            }
        }
        catch (Exception ex)
        {
            // Handle any other exceptions that may occur
            // For example, you can log the error or display an error message to the user
        }
    }

    private async Task FetchCommentsForPostAsync(int postId)
    {
        try
        {
            // Retrieve comments for the specified post from the server
            var fetchedComments = await Http.GetFromJsonAsync<IEnumerable<Comment>>($"api/Comment/Classroom/{CourseId}/{postId}");

            // Update the comments dictionary with the fetched comments
            if (fetchedComments != null)
            {
                comments[postId] = fetchedComments.ToList();
            }
            else
            {
                // Clear the comments list if no comments were fetched
                comments[postId].Clear();
            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions that may occur while fetching comments
            // For example, you can log the error or display an error message to the user
        }
    }
}





